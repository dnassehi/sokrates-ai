# üß† Sokrates AI ‚Äì Mistral AI Agent Integrasjon

Dette dokumentet forklarer hvordan Mistral AI Agent API er integrert i Sokrates AI-prosjektet. Det gir veiledning for utviklere og AI-agenter som skal forst√•, videreutvikle eller jobbe med systemet.

---

## üìå Form√•l

Mistral AI Agent API brukes for √• lede pasienten gjennom en sokratisk samtale og samle inn strukturert medisinsk anamnesedata. Samtalene mellom pasienten og assistenten genererer et JSON-objekt som kan vurderes av legen.

---

## ‚öôÔ∏è Teknisk Oppsett

### üîë API-n√∏kler

Alle API-n√∏kler defineres i `.env` (ikke versjonskontroll√©r sensitive data):

```env
MISTRAL_API_KEY="your_mistral_api_key_here"
MISTRAL_AGENT_ID="ag_your_mistral_agent_id_here"
MISTRAL_MODEL="mistral-large-latest"
JWT_SECRET="..."

# Legacy OpenAI configuration (deprecated)
# OPENAI_API_KEY="sk-..."
# ASSISTANT_ID="asst_..."
# ANAMNESIS_MODEL="gpt-4o"
```

### üß† Brukt API: Mistral AI Agent API

- **Modell**: mistral-large-latest (for anamnese-generering)
- **Agent ID**: Definert i `.env`
- **Arbeidsflyt**: Stateless chat-komplettering
  1. Hent alle meldinger fra database
  2. Bygg meldingshistorikk
  3. Kall `mistral.agents.complete()` med full historikk
  4. Lagre assistentens svar i database

---

## üßæ JSON-schema (Anamnese-svar)

Mistral AI-agenten genererer strukturert JSON:

```json
{
  "hovedplage": "string",
  "tidligereSykdommer": "string",
  "medisinering": "string",
  "allergier": "string",
  "familiehistorie": "string",
  "sosialLivsstil": "string",
  "ros": "string",
  "pasientM√•l": "string",
  "friOppsummering": "string"
}
```

---

## üìÇ Relevant Filstruktur

| Fil | Form√•l |
|-----|--------|
| `src/server/trpc/procedures/sendChatMessage.ts` | Kaller Mistral AI Agent API |
| `src/server/trpc/procedures/completeChatSession.ts` | Genererer strukturert anamnese fra samtale via Mistral |
| `src/routes/chat/index.tsx` | Chat-UI for pasienter |
| `src/server/db.ts` | Prisma-databaseklient |
| `src/server/trpc/procedures/createChatSession.ts` | H√•ndterer sesjonsopprettelse |
| `src/server/trpc/procedures/submitRating.ts` | Lagrer pasientens tilbakemeldinger |
| `src/routes/doctor/dashboard/index.tsx` | Lege-dashboard |
| `src/routes/doctor/session/$sessionId/index.tsx` | Sesjonsdetaljer for leger |

---

## üîê Autentisering

- **Pasienter**: Anonym chat uten registrering
- **Leger**: JWT-basert autentisering med e-post/passord
- **Klinikk-isolasjon**: Leger ser kun sesjoner fra sin egen klinikk

---

## üìë Mistral AI-brukspolicy

- Alle Mistral AI-kall skjer server-side slik at API-n√∏kkelen ikke eksponeres
- N√∏klene lagres kun i milj√∏variabler og skrives ikke til databasen
- Foresp√∏rsler inkluderer anonym sesjons-ID for tracking
- Se https://openai.com/policies/usage-policies for mer informasjon

---

## üîÅ Chat-flyt

### Pasient-flyt:
1. **Opprett sesjon**: `createChatSession()` ‚Üí returnerer `sessionId`
2. **Send melding**: `sendChatMessage(sessionId, message)` ‚Üí AI-respons
3. **Fullf√∏r sesjon**: `completeChatSession(sessionId)` ‚Üí generer anamnese
4. **Gi vurdering**: `submitRating(sessionId, rating)` (valgfritt)

### Lege-flyt:
1. **Logg inn**: `doctorLogin(email, password)`
2. **Se oversikt**: `getDoctorSessions()` ‚Üí liste over sesjoner
3. **Se detaljer**: `getSessionDetails(sessionId)` ‚Üí komplett samtale + anamnese

---

## üß™ Testing

### Demo-data:
- **Demo-lege**: `demo@sokrates.no` / `demo123`
- **Klinikkode**: `DEMO_CLINIC`
- **Eksempel-sesjon**: Inkluderer komplett samtale og anamnese

### API-testing:
```bash
# Test chat-funksjonalitet
curl -X POST http://localhost:8000/api/trpc/sendChatMessage \
  -H "Content-Type: application/json" \
  -d '{"sessionId": 1, "message": "Jeg har hodepine"}'
```

---

## üí° Videre arbeid

- [ ] Flere spr√•kst√∏tter i systemprompt
- [ ] Frontend-validering av output
- [ ] Finjustering av prompt for medisinsk n√∏yaktighet
- [ ] Logging av prompts/respons (GDPR-kompatibelt)
- [ ] Real-time chat med WebSocket
- [ ] Fil-opplasting for bilder/dokumenter

---

## üß© Eksempel p√• API-kall

### Send chat-melding:
```typescript
// Opprett eller bruk eksisterende thread
let threadId = session.openaiThreadId;
if (!threadId) {
  const thread = await openai.beta.threads.create();
  threadId = thread.id;
}

// Send melding
await openai.beta.threads.messages.create(threadId, {
  role: "user",
  content: message,
});

// Start assistant run
const run = await openai.beta.threads.runs.create(threadId, {
  assistant_id: env.ASSISTANT_ID,
});

// Poll for completion
let runStatus = await openai.beta.threads.runs.retrieve(run.id, {
  thread_id: threadId
});

while (runStatus.status === "in_progress" || runStatus.status === "queued") {
  await new Promise(resolve => setTimeout(resolve, 1000));
  runStatus = await openai.beta.threads.runs.retrieve(run.id, {
    thread_id: threadId
  });
}

// Hent svar
const messages = await openai.beta.threads.messages.list(threadId);
const assistantMessage = messages.data.find(msg =>
  msg.role === "assistant" && msg.run_id === run.id
);
```

### Generer anamnese:
```typescript
const response = await openai.chat.completions.create({
  model: env.ANAMNESIS_MODEL,
  messages: [
    {
      role: "system",
      content: "Generer strukturert anamnese basert p√• samtalen"
    },
    {
      role: "user",
      content: conversationHistory
    }
  ],
  response_format: { type: "json_object" }
});
```

---

## üóÑÔ∏è Database-struktur

### Database-konfigurasjon

#### Prisma Schema (`prisma/schema.prisma`)
```prisma
datasource db {
  provider = "postgresql"
  // For Docker/local development:
  // url      = "postgresql://postgres:postgres@postgres/app"
  // For DigitalOcean/production:
  url      = env("DATABASE_URL")
}
```

#### Docker/Local Development
- **Host**: `postgres` (Docker service name)
- **Port**: `5432`
- **Database**: `app`
- **Username**: `postgres`
- **Password**: `postgres`

For √• bytte til Docker-modus, uncomment Docker URL og comment ut env-versjonen:
```prisma
datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@postgres/app" // Docker mode
  // url      = env("DATABASE_URL") // Production mode
}
```

#### DigitalOcean Production
- Bruker managed PostgreSQL database
- Connection string leveres via `DATABASE_URL` environment variable
- Private connection for sikkerhet

### Hovedmodeller:
- **Doctor**: Lege-kontoer med e-post, passord, klinikkode
- **Session**: Pasientsesjoner med status, OpenAI thread ID
- **Message**: Individuelle meldinger (user/assistant)
- **Anamnesis**: Strukturert medisinsk anamnese
- **Rating**: Pasientvurderinger (1-5 stjerner)

### Relasjoner:
- `Doctor` ‚Üí `Session` (one-to-many)
- `Session` ‚Üí `Message` (one-to-many)
- `Session` ‚Üí `Anamnesis` (one-to-one)
- `Session` ‚Üí `Rating` (one-to-one)

---

## üöÄ Deployment

### Docker Compose:
```bash
cd docker
docker-compose up --build -d
```

### Milj√∏variabler:
- `NODE_ENV=production`
- `BASE_URL=http://localhost:3000`
- `OPENAI_API_KEY=sk-...`
- `ASSISTANT_ID=asst_...`
- `ANAMNESIS_MODEL=gpt-4o`
- `JWT_SECRET=...`

---

## üîß Utvikling

### Lokal utvikling:
```bash
pnpm install
pnpm run dev
```

### Database-tilgang:
```bash
# Prisma Studio
npx prisma studio --schema=prisma/schema.local.prisma

# Adminer
# http://localhost:8080 (postgres/postgres/app)
```

---

## üë§ Ansvarlig utvikler

- **Hovedkontakt**: @damoun.nassehi
- **OpenAI Assistant**: Konfigurert og finjustert
- **Sist oppdatert**: Januar 2025

